# Reproducible Research

## Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://rdpeng.github.io/Biostat776/lecture-literate-statistical-programming.html>
-   <https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown>

::: callout-tip
### Additional Resources

-   [RMarkdown Tips and Tricks](https://indrajeetpatil.github.io/RmarkdownTips/) by Indrajeet Patil
-   <https://bookdown.org/yihui/rmarkdown>
-   <https://bookdown.org/yihui/rmarkdown-cookbook>
:::

## Learning objectives

::: callout-note
### Learning objectives

**At the end of this lesson you will:**

-   Be able to define literate programming
-   Recognize differences between available tools to for literate programming
-   Know how to efficiently work within RStudio for efficient literate programming
-   Create a R Markdown document
:::

## Introduction

One basic idea to make writing reproducible reports easier is what's known as *literate statistical programming* (or sometimes called [literate statistical practice](http://www.r-project.org/conferences/DSC-2001/Proceedings/Rossini.pdf)). This comes from the idea of [literate programming](https://en.wikipedia.org/wiki/Literate_programming) in the area of writing computer programs.

The idea is to **think of a report or a publication as a stream of text and code**.

-   The text is readable by people and the code is readable by computers.
-   The analysis is described in a series of text and code chunks.
-   Each kind of code chunk will do something like load some data or compute some results.
-   Each text chunk will relay something in a human readable language.

There might also be **presentation code** that formats tables and figures and there's article text that explains what's going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis.

### Weaving and Tangling

Literate programs by themselves are a bit difficult to work with, but they can be processed in two important ways.

Literate programs can be **weaved** to produce human readable documents like PDFs or HTML web pages, and they can **tangled** to produce machine-readable "documents", or in other words, machine readable code.

The basic idea behind literate programming in order to generate the different kinds of output you might need, **you only need a single source document**---you can weave and tangle to get the rest.

In order to use a system like this you need a documentational language, that's human readable, and you need a programming language that's machine readable (or can be compiled/interpreted into something that's machine readable).

### rmarkdown

A common choice for literate programming with R code is to build documents based on [Markdown](https://en.wikipedia.org/wiki/Markdown) language. A markdown file is a plain text file that is typically given the extension `.md.`. The [`rmarkdown`](https://CRAN.R-project.org/package=rmarkdown) R package takes a R Markdown file (`.Rmd`) and weaves together R code chunks like this:

    ```{r plot1, height=4, width=5, eval=FALSE, echo=TRUE}`r ''`
    data(airquality)
    plot(airquality$Ozone ~ airquality$Wind)
    ```

::: callout-tip
The best resource for learning about R Markdown this by Yihui Xie, J. J. Allaire, and Garrett Grolemund:

-   <https://bookdown.org/yihui/rmarkdown>

The R Markdown Cookbook by Yihui Xie, Christophe Dervieux, and Emily Riederer is really good too:

-   <https://bookdown.org/yihui/rmarkdown-cookbook>

The authors of the 2nd book describe the motivation for the 2nd book as:

> "However, we have received comments from our readers and publisher that it would be beneficial to provide more practical and relatively short examples to show the interesting and useful usage of R Markdown, because it can be daunting to find out how to achieve a certain task from the aforementioned reference book (put another way, that book is too dry to read). As a result, this cookbook was born."
:::

Because this is lecture is built in a `.qmd` file (which is very similar to a `.Rmd` file), let's demonstrate how this work. I am going to change `eval=FALSE` to `eval=TRUE`.

```{r plot2, height=4, width=5, eval=TRUE, echo=TRUE}
data(airquality)
plot(airquality$Ozone ~ airquality$Wind)
```

::: callout-tip
### Questions

1.  Why do we not see the back ticks \`\`\` anymore in the code chunk above that made the plot?
2.  What do you think we should do if we want to have the code executed, but we want to hide the code that made it?
:::

Before we leave this section, I find that there is quite a bit of terminology to understand the magic behind `rmarkdown` that can be confusing, so let's break it down:

-   [Pandoc](https://pandoc.org). Pandoc is a command line tool with no GUI that converts documents (e.g. from number of different markup formats to many other formats, such as .doc, .pdf etc). It is completely independent from R (but does come bundled with RStudio).
-   [Markdown](https://en.wikipedia.org/wiki/Markdown) (**markup language**). Markdown is a lightweight [markup language](https://en.wikipedia.org/wiki/Markup_language) with plain text formatting syntax designed so that it can be converted to HTML and many other formats. A markdown file is a plain text file that is typically given the extension `.md.` It is completely independent from R.
-   [`markdown`](https://CRAN.R-project.org/package=markdown) (**R package**). `markdown` is an R package which converts `.md` files into HTML. It is no longer recommended for use has been surpassed by [`rmarkdown`](https://CRAN.R-project.org/package=rmarkdown) (discussed below).
-   R Markdown (**markup language**). R Markdown is an extension of the markdown syntax. R Markdown files are plain text files that typically have the file extension `.Rmd`.
-   [`rmarkdown`](https://CRAN.R-project.org/package=rmarkdown) (**R package**). The R package `rmarkdown` is a library that uses pandoc to process and convert `.Rmd` files into a number of different formats. This core function is `rmarkdown::render()`. **Note**: this package only deals with the markdown language. If the input file is e.g. `.Rhtml` or `.Rnw`, then you need to use `knitr` prior to calling pandoc (see below).

::: callout-tip
Check out the R Markdown Quick Tour for more:

-   <https://rmarkdown.rstudio.com/authoring_quick_tour.html>
:::

![Artwork by Allison Horst on RMarkdown](https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/rmarkdown_rockstar.png){width="80%"}

### knitr

One of the alternative that has come up in recent times is something called `knitr`.

-   The `knitr` package for R takes a lot of these ideas of literate programming and updates and improves upon them.
-   `knitr` still uses R as its programming language, but it allows you to mix other programming languages in.
-   You can also use a variety of documentation languages now, such as LaTeX, markdown and HTML.
-   `knitr` was developed by Yihui Xie while he was a graduate student at Iowa State and it has become a very popular package for writing literate statistical programs.

Knitr takes a plain text document with embedded code, executes the code and 'knits' the results back into the document.

For for example, it converts

-   An R Markdown (`.Rmd)` file into a standard markdown file (`.md`)
-   An `.Rnw` (Sweave) file into to `.tex` format.
-   An `.Rhtml` file into to `.html`.

The core function is `knitr::knit()` and by default this will look at the input document and try and guess what type it is e.g. `Rnw`, `Rmd` etc.

This core function performs three roles:

-   A **source parser**, which looks at the input document and detects which parts are code that the user wants to be evaluated.
-   A **code evaluator**, which evaluates this code
-   An **output renderer**, which writes the results of evaluation back to the document in a format which is interpretable by the raw output type. For instance, if the input file is an `.Rmd`, the output render marks up the output of code evaluation in `.md` format.

```{r rmarkdown-wizards, echo = FALSE, fig.cap = "Converting a Rmd file to many outputs using knitr and pandoc", out.width = '60%', fig.align='center', preview=TRUE}
knitr::include_graphics("https://d33wubrfki0l68.cloudfront.net/61d189fd9cdf955058415d3e1b28dd60e1bd7c9b/9791d/images/rmarkdownflow.png")
```

\[[Source](https://rmarkdown.rstudio.com/authoring_quick_tour.html)\]

As seen in the figure above, from there pandoc is used to convert e.g. a `.md` file into many other types of file formats into a `.html`, etc.

So in summary:

> "R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on)."

\[[Source](https://bookdown.org/yihui/rmarkdown/)\]

## Create and Knit Your First R Markdown Document

<iframe width="560" height="315" src="https://www.youtube.com/embed/dY9KNat_vYs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

When creating your first R Markdown document, in RStudio you can

1.  Go to File \> New File \> R Markdown...

2.  Feel free to edit the Title

3.  Make sure to select "Default Output Format" to be HTML

4.  Click "OK". RStudio creates the R Markdown document and places some boilerplate text in there just so you can see how things are setup.

5.  Click the "Knit" button (or go to File \> Knit Document) to make sure you can create the HTML output

If you successfully knit your first R Markdown document, then congratulations!

```{r}
#| label: missionaccomplished
#| echo: false
#| out-width: '60%'
#| fig-cap: "Mission accomplished!"
knitr::include_graphics("https://media.giphy.com/media/L4ZZNbDpOCfiX8uYSd/giphy.gif")
```

## Tips and tricks in R Markdown in RStudio

Here are shortcuts and tips on efficiently using RStudio to improve how you write code.

### Run code

If you want to run a code chunk:

    command + Enter on Mac
    Ctrl + Enter on Windows

### Insert a comment in R and R Markdown

To insert a comment:

    command + Shift + C on Mac
    Ctrl + Shift + C on Windows

This shortcut can be used both for:

-   R code when you want to comment your code. It will add a `#` at the beginning of the line
-   for text in R Markdown. It will add `<!--` and `-->` around the text

Note that if you want to comment more than one line, select all the lines you want to comment then use the shortcut. If you want to uncomment a comment, apply the same shortcut.

### Knit a R Markdown document

You can knit R Markdown documents by using this shortcut:

    command + Shift + K on Mac
    Ctrl + Shift + K on Windows

### Code snippets

Code snippets is usually a few characters long and is used as a shortcut to insert a common piece of code. You simply type a few characters then press `Tab` and it will complete your code with a larger code. `Tab` is then used again to navigate through the code where customization is required. For instance, if you type `fun` then press `Tab`, it will auto-complete the code with the required code to create a function:

    name <- function(variables) {
      
    }

Pressing `Tab` again will jump through the placeholders for you to edit it. So you can first edit the name of the function, then the variables and finally the code inside the function (try by yourself!).

There are many code snippets by default in RStudio. Here are the code snippets I use most often:

-   `lib` to call `library()`

```{r, eval = FALSE}
library(package)
```

-   `mat` to create a matrix

```{r, eval = FALSE}
matrix(data, nrow = rows, ncol = cols)
```

-   `if`, `el`, and `ei` to create conditional expressions such as `if() {}`, `else {}` and `else if () {}`

```{r, eval = FALSE}
if (condition) {
  
}

else {
  
}

else if (condition) {
  
}
```

-   `fun` to create a function

```{r, eval = FALSE}
name <- function(variables) {
  
}
```

-   `for` to create for loops

```{r, eval = FALSE}
for (variable in vector) {
  
}
```

-   `ts` to insert a comment with the current date and time (useful if you have very long code and share it with others so they see when it has been edited)

```{r, eval = FALSE}
# Tue Jan 21 20:20:14 2020 ------------------------------

```

You can see all default code snippets and add yours by clicking on Tools \> Global Options... \> Code (left sidebar) \> Edit Snippets...

### Ordered list in R Markdown

In R Markdown, when creating an ordered list such as this one:

1.  Item 1
2.  Item 2
3.  Item 3

Instead of bothering with the numbers and typing

    1. Item 1
    2. Item 2
    3. Item 3

you can simply type

    1. Item 1
    1. Item 2
    1. Item 3

for the exact same result (try it yourself or check the code of this article!). This way you do not need to bother which number is next when creating a new item.

To go even further, any numeric will actually render the same result as long as the first item is the number you want to start from. For example, you could type:

    1. Item 1
    7. Item 2
    3. Item 3

which renders

1.  Item 1
2.  Item 2
3.  Item 3

However, I suggest always using the number you want to start from for all items because if you move one item at the top, the list will start with this new number. For instance, if we move `7. Item 2` from the previous list at the top, the list becomes:

    7. Item 2
    1. Item 1
    3. Item 3

which incorrectly renders

7.  Item 2
8.  Item 1
9.  Item 3

### New code chunk in R Markdown

When editing R Markdown documents, you will need to insert a new R code chunk many times. The following shortcuts will make your life easier:

    command + option + I on Mac (or command + alt + I depending on your keyboard)
    Ctrl + ALT + I on Windows

### Reformat code

A clear and readable code is always easier and faster to read (and look more professional when sharing it to collaborators). To automatically apply the most common coding guidelines such as white spaces, indents, etc., use:

    cmd + Shift + A on Mac
    Ctrl + Shift + A on Windows

So for example the following code which does not respect the guidelines (and which is not easy to read):

    1+1
      for(i in 1:10){if(!i%%2){next}
    print(i)
     }

becomes much more neat and readable:

    1 + 1
    for (i in 1:10) {
      if (!i %% 2) {
        next
      }
      print(i)
    }

### RStudio addins

RStudio addins are extensions which provide a simple mechanism for executing advanced R functions from within RStudio. In simpler words, when executing an addin (by clicking a button in the Addins menu), the corresponding code is executed without you having to write the code. RStudio addins have the advantage that they allow you to execute complex and advanced code much more easily than if you would have to write it yourself.

::: callout-tip
**For more information about RStudio addins, check out**:

-   <https://rstudio.github.io/rstudioaddins>
-   <https://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown>
:::

### Others

Similar to many other programs, you can also use:

-   `command + Shift + N` on Mac and `Ctrl + Shift + N` on Windows to open a new R Script
-   `command + S` on Mac and `Ctrl + S` on Windows to save your current script or R Markdown document

Check out Tools --\> Keyboard Shortcuts Help to see a long list of these shortcuts.

## Session Info

```{r}
sessionInfo()
```
